import ProductCard from '../components/ProductCard'
import {Todo} from '@prisma/client'
import React, {useState, useEffect} from 'react'
import styles from './index.module.css';

type HomeProps = { todos: Array<Todo> }
export default function Home(props: HomeProps) {
  const [name, setName] = useState('')
  const [content, setContent] = useState('')
  const [todos, setTodos] = useState(new Array<Todo>)

  const create = async(e: React.SyntheticEvent) => {
    try {
      e.preventDefault()
      await fetch('/api/todos', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json'},
        body: JSON.stringify({name, content})
      })
      get()
    } catch (error) {
      console.error(`Failed to create todo: ${error}`)
    }
  }

  const remove = async(e: React.SyntheticEvent, id: string) => {
    try {
      await fetch(`/api/todos/${id}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json'},
      })
      get()
    } catch (error) {
      console.error(`Failed to delete todo: ${error}`)
    }
  }

  const update = async(e: React.SyntheticEvent, id: string, todo: Todo) => {
    try {
      await fetch(`/api/todos/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json'},
        body: JSON.stringify(todo)
      })
      get()
    } catch (error) {
      console.error(`Failed to update todo: ${error}`)
    }
  }

  const get = async() => {
    try {
      const res = await fetch(`/api/todos`)
      setTodos(await res.json() as Todo[])
    } catch (error) {
      console.error(`Failed to get todos: ${error}`)
    }
  }

  useEffect(() => { get() }, [])

  return (
    <div className={styles.container}>
      <div className={styles.head}>
        <title>Starter App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </div>

      <div className={styles.main}>
        <div className={styles.header}>
          <div className={styles.title}>Your Acorn application is now running!</div>
          <hr/>
        </div>
        <div className={styles.grid}>
          <ProductCard>
            <form onSubmit={create}>
              <p 
                contentEditable="true" 
                onBlur={(e) => setName(String(e.currentTarget.textContent))}
                suppressContentEditableWarning={true}
              >
                  New Todo
              </p>
              <textarea className={styles.content} placeholder="Content" onChange={(e) => setContent(e.target.value)}/>
              <br/>
              <input className={styles.submit} disabled={!name || !content} type="submit" value="Create" />
            </form>
          </ProductCard>
          {todos.map((todo, i) => 
            <ProductCard key={i}>
              <div className={styles.todo}>
                <p
                  contentEditable={!todo.complete}
                  suppressContentEditableWarning={true}
                  onBlur={(e) => {
                    todo.name = String(e.currentTarget.textContent)
                    update(e, todo.id, todo)
                  }}
                  className={todo.complete ? styles.strike : ""}
                >
                  {todo.name}
                </p>
                
                <textarea 
                  disabled={todo.complete}
                  className={`${styles.content} ${todo.complete ? styles.strike : ""}`}
                  defaultValue={String(todo.content)} 
                  onBlur={(e) => {
                    todo.content = e.target.value
                    update(e, todo.id, todo)
                  }}
                />

                <div className={styles.options}>
                  <button className={styles.complete} onClick={(e) => {
                    todo.complete = !todo.complete
                    update(e, todo.id, todo)
                  }}>
                    {todo.complete ? '‚úÖ' : '‚¨ú'}
                  </button>
                  <button className={styles.remove} onClick={(e) => remove(e, todo.id) }>üóëÔ∏è</button>
                </div>

              </div>
            </ProductCard>
          )}
        </div>
      </div>
    </div>
  )
}
